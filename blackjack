from Card_Games import blackjack_constants
from Card_Games.deck import *
from typing import List, Dict
import sys
import time
from matplotlib import pyplot


class MoveWinner:
    """Performs one hand of blackjack with either user inputted moves or GTO moves."""
    game: GameSetup
    player_counts: Dict[int, int] = {}
    
    winners: Dict[int, float] = {}

    bet: int = blackjack_constants.BET_SIZE

    dealer_up: int


    def __init__(self) -> None:
        self.game = GameSetup(blackjack_constants.NUMCARDSPER, blackjack_constants.NUM_PLAYERS + 1)
        for i in range(0, blackjack_constants.NUM_PLAYERS + 1):
            self.player_counts[i] = 0
            if i > 0:
                self.player_counts[i + blackjack_constants.SPLIT_CONSTANT] = 0
            self.winners[i] = 0
        if self.game.hands[0][0].number == 11 or 12 or 13:
            self.dealer_up = 10
        else:   
            self.dealer_up = self.game.hands[0][0].number
    

    def sequence_perfect(self, player: int) -> None:
        """For each player, performs one hand using a GTO strategy"""
        self.bet = blackjack_constants.BET_SIZE
        self.player_action_perfect(player, False)
        if self.player_counts[player + blackjack_constants.SPLIT_CONSTANT] != 0:
            for hand in [player, player + blackjack_constants.SPLIT_CONSTANT]:
                if self.determine_winner(hand) == 1:
                    self.winners[player] += self.bet * 0.5
                elif self.determine_winner(hand) == -1:
                    self.winners[player] -= self.bet * 0.5
                else:
                    return None
        else:
            if self.determine_winner(player) == 1:
                if self.player_counts[player] == 21:
                    self.winners[player] += self.bet * 1.5
                else:
                    self.winners[player] += self.bet
            elif self.determine_winner(player) == -1:
                self.winners[player] -= self.bet
            else:
                return None
    
 
    def dealer_action(self) -> None:
        """Hits and stands for the dealer"""
        self.count(0)
        while self.player_counts[0] < 17:
            self.hit(0)
            self.count(0)


    def player_action_perfect(self, player: int, split: bool) -> None:
        """If pocket pair or ace present, acts according to GTO, otherwise moves to a GTO hit tree"""
        player_numbers: List[int] = [self.game.hands[player][0].number, self.game.hands[player][1].number]
        if (player_numbers[0] == player_numbers[1]) and not split:
            if 8 or 14 in player_numbers:
                self.split_perfect(player)
            elif player_numbers[0] >= 10 and player_numbers[0] < 14:
                self.count(player)
            elif 9 in player_numbers:
                if self.dealer_up == 7 or self.dealer_up >= 10:
                    self.count(player)
            elif 7 in player_numbers:
                if self.dealer_up >= 8:
                    self.hit(player)
                    self.hit_tree_count(player)
                else:
                    self.split_perfect(player)
            elif 6 in player_numbers:
                if self.dealer_up >= 7:
                    self.hit(player)
                    self.hit_tree_count(player)
                else:
                    self.split_perfect(player)
            elif 5 in player_numbers:
                if self.dealer_up >= 10:
                    self.hit(player)
                    self.hit_tree_count(player)
                else:
                    self.double_down()
            elif 4 in player_numbers:
                if self.dealer_up == 5 or 6:
                    self.split_perfect(player)
                else:
                    self.hit(player)
                    self.hit_tree_count(player)
            elif player_numbers[0] <= 3:
                if self.dealer_up >= 8:
                    self.hit(player)
                    self.hit_tree_count(player)
                else:
                    self.split_perfect(player)
        elif 14 in player_numbers:
            if 7 in player_numbers:
                if self.dealer_up == 2 or 7 or 8:
                    self.count(player)
                elif self.dealer_up >= 3 and self.dealer_up <= 6:
                    self.double_down()
                else:
                    self.hit(player)
                    self.hit_tree_count(player)
            elif 6 in player_numbers:
                if self.dealer_up >= 3 and self.dealer_up <= 6:
                    self.double_down()
                else:
                    self.hit(player)
                    self.hit_tree_count(player)
            elif 5 or 4 in player_numbers:
                if self.dealer_up >= 4 and self.dealer_up <= 6:
                    self.double_down()
                else:
                    self.hit(player)
                    self.hit_tree_count(player)
            elif 3 or 2 in player_numbers:
                if self.dealer_up == 5 or 6:
                    self.double_down()
                else:
                    self.hit(player)
                    self.hit_tree_count(player)
            else:
                #A8-10
                self.count(player)          
        else:
            #No pocket pair or Ace
            self.hit_tree_count(player)
        

    def hit_tree_count(self, player: int) -> None:
        """Determines the GTO move based on the player's count and dealer's upcard"""
        self.count(player)
        tot: int = self.player_counts[player]
        if tot >= 17:
            return None
        elif tot >= 13 and tot <= 16:
            if self.dealer_up >= 7:
                self.hit(player)
                self.hit_tree_count(player)
            else:
                return None
        elif tot == 12:
            if self.dealer_up >= 4 and self.dealer_up <= 6:
                return None
            else:
                self.hit(player)
                self.hit_tree_count(player)
        elif (tot == 10 or 11) and (self.dealer_up <= 9):
            self.double_down()
            self.hit(player)
            self.hit_tree_count(player)
        elif (tot == 11 and self.dealer_up == 10):
            self.double_down()
            self.hit(player)
            self.hit_tree_count(player)
        elif (tot == 9 and self.dealer_up >= 3 and self.dealer_up <= 6):
            self.double_down()
            self.hit(player)
            self.hit_tree_count(player)
        else:
            #tot == 4-9
            self.hit(player)
            self.hit_tree_count(player)
                

    def player_action_input(self, player: int, split: bool = False) -> None:
        """Logic behind choices for user-inputted action"""
        self.card_repr_terminal(self.game.hands[player])
        if not split:
            d = input("Choices: hit, stand, double down, split. Choose: ")
            if d == "hit":
                self.hit(player)
                print(self.game.hands[player][len(self.game.hands[player]) - 1])
            elif d == "stand":
                self.count(player)
                print(f"Stand on {self.player_counts[player]}")
                return None
            elif d == "double down":
                self.double_down()
                self.hit(player)
            elif d == "split":
                self.split_user(player)
                return None
            else:
                print("Must choose one of the 4 actions.")
                self.player_action_input(player)
                return None
        else:
            d = input("Choices: hit, stand, double down. Choose: ")
            if d == "hit":
                self.hit(player)
                print(self.game.hands[player][len(self.game.hands[player]) - 1])
            elif d == "stand":
                self.count(player)
                print(f"Stand on {self.player_counts[player]}")
                if self.player_counts[player] == 21:
                    print("Blackjack!")
                elif self.player_counts[player] > 21:
                    print("Bust!")
                return None
            elif d == "double down":
                self.double_down()
                self.hit(player)
            elif d == "split":
                print("Error: can not split twice.")
                self.player_action_input(player, True)
            else:
                print("Must choose one of the 4 actions.")
                self.player_action_input(player, True)
                return None
        self.count(player)
        print(f"Count is {self.player_counts[player]}")
        if self.player_counts[player] == 21:
            print("Blackjack!")
        elif self.player_counts[player] > 21:
            print("Bust!")
        else:
            if not split:
                self.player_action_input(player)
            else:
                self.player_action_input(player, True)


    def card_repr_terminal(self, hand_raw: List[Cards]) -> None:
        hand: List[List[str]] = []
        for card in hand_raw:
            num_int: int = (card.number)
            num_str: str
            suit: str | int = card.suit
            if num_int == 14 or num_int == 1:
                num_str = "A"
            elif num_int == 13:
                num_str = "K"
            elif num_int == 12:
                num_str = "Q"
            elif num_int == 11:
                num_str = "J"
            else:
                num_str = str(card.number)
            if suit == "spades":
                suit = "\U00002660"
            elif suit == "hearts":
                suit = "\U00002665"
            elif suit == "diamonds":
                suit = "\U00002666"
            elif suit == "clubs":
                suit = "\U00002663"
            line1 = "*-----*  "
            if num_int == 10:
                line2 = f"|{num_str}   |  "
            else:
                line2 = f"|{num_str}    |  "
            line3 = f"|{suit}    |  "
            line4 = f"|    {suit}|  "
            if num_int == 10:
                line5 = f"|   {num_str}|  "
            else:
                line5 = f"|    {num_str}|  "
            line6 = "*-----*  "
            hand.append([line1, line2, line3, line4, line5, line6])
        master_hand: List[str] = []
        for i in range(0, 6):
            tot_line: str = ""
            for card in hand:
                tot_line += card[i]
            master_hand.append(tot_line)
        for i in range(0, len(master_hand)):
            print(master_hand[i])



    def hit(self, player: int) -> None:
        """Gives a player an additional card"""
        self.game.hands[player].append(self.game.deck.pop(0))

    
    def split_hands(self, player: int) -> None:
        """Splits a player's hand"""
        self.game.hands[player + blackjack_constants.SPLIT_CONSTANT] = []
        self.game.hands[player + blackjack_constants.SPLIT_CONSTANT].append(self.game.hands[player].pop(1))
        for hand in [player, player + blackjack_constants.SPLIT_CONSTANT]:
            self.game.hands[hand].append(self.game.deck.pop(0))


    def split_perfect(self, player: int) -> None:
        """Performs the split action using game theory"""
        self.split_hands(player)
        self.player_action_perfect(player, True)
        self.player_action_perfect(player + blackjack_constants.SPLIT_CONSTANT, True)
        

    def split_user(self, player: int):
        """Performs split using user-inputted function"""
        self.split_hands(player)
        self.player_action_input(player, True)
        self.player_action_input(player + blackjack_constants.SPLIT_CONSTANT, True)

    
    def double_down(self) -> None:
        """Doubles bet size"""
        self.bet *= 2
    

    def count(self, player: int) -> None:
        """Determines count of one player"""
        self.player_counts[player] = 0
        for card in self.game.hands[player]:
            if card.number > 10 and card.number < 14:
                self.player_counts[player] += 10
            elif card.number == 14:
                if self.player_counts[player] > 10:
                    self.player_counts[player] += 1
                else:
                    self.player_counts[player] += 11
            else:
                self.player_counts[player] += card.number
        while self.player_counts[player] > 21:
            if self.high_ace(player):
                self.ace_correction(player)
            else:
                break

    
    def high_ace(self, player: int) -> bool:
        """Checks for an ace counting as 11"""
        for card in self.game.hands[player]:
            if card.number == 14:
                return True
        return False


    def ace_correction(self, player: int) -> None:
        """Changes value of ace from 11 to 1"""
        for card in self.game.hands[player]:
            if card.number == 14:
                card.number = 1
                self.player_counts[player] -= 10


    def determine_winner(self, player: int) -> int:
        """Determines if inputted player beats the dealer"""
        self.count(player)
        if self.player_counts[player] <= 21:
            if self.player_counts[player] > self.player_counts[0] or self.player_counts[0] > 21:
                return 1
            elif self.player_counts[player] == self.player_counts[0]:
                return 0
            else:
                return -1
        else:
            return -1


class UserControlled:
    move: MoveWinner
    player_bank: List[int] = [blackjack_constants.DEALER_BANKROLL, blackjack_constants.PLAYER_BANKROLL]


    def run(self) -> None:
        self.move = MoveWinner()
        self.move.dealer_action()
        if not self.test_dealer_blackjack():
            print(f"Dealers upcard: {self.move.game.hands[0][0]}")
            self.move.player_action_input(1, False)
            print(f"Dealer's count: {self.move.player_counts[0]}")
        self.determine_winner_user()
        d = input("Play again? ")
        if d == "yes":
            self.run()
        else:
            return None
    
    
    def determine_winner_user(self) -> None:
        if self.move.determine_winner(1) == 1:
            print("You win!")
            self.player_bank[1] += self.move.bet
        elif self.move.determine_winner(1) == -1:
            print("You lose!")
            self.player_bank[1] -= self.move.bet
        else:
            print("Push!")
        print(f"Stack: {self.player_bank[1]}")

    
    def test_dealer_blackjack(self) -> bool:
        self.move.count(0)
        if self.move.player_counts[0] == 21:
            return True
        return False


class IdealControlled:
    move: MoveWinner
    player_bank: List[float] = []
    dealer_bank: float = blackjack_constants.DEALER_BANKROLL

    hand_num: int = 0

    bank_over_time: List[List[int]] = [[]]


    def __init__(self) -> None:
        self.player_bank.append(self.dealer_bank)
        for _ in range(1, blackjack_constants.NUM_PLAYERS + 1):
            self.player_bank.append(blackjack_constants.PLAYER_BANKROLL)

    
    def run(self) -> None:
        self.move = MoveWinner()
        self.move.dealer_action()
        for player in range(1, blackjack_constants.NUM_PLAYERS + 1):
            self.move.sequence_perfect(player)
            self.player_bank[player] += self.move.winners[player]
            self.bank_over_time[0].append(int(self.player_bank[player]))
            self.hand_num += 1
            

    
    def stats(self, time: float) -> None:
        print(f"Simulated {self.hand_num} hands in {time} seconds.")
        print(f"Player 1 stack: {int(self.player_bank[1])}")
        self.chart_data()


    def chart_data(self) -> None:
        pyplot.title("Blackjack stack over time")
        pyplot.xlabel("Hand")
        pyplot.ylabel("Stack")
        labels: List[int] = []
        for i in range(0, self.hand_num + 1):
            labels.append(i)
        values = self.bank_over_time[0]
        pyplot.plot(labels, values)
        pyplot.plot(labels, self.make_control(self.hand_num))
        pyplot.show()    


    def make_control(self, hands: int) -> List[int]:
        control: List[int] = [blackjack_constants.PLAYER_BANKROLL]
        for i in range(1, hands + 1):
            control.append(int(blackjack_constants.PLAYER_BANKROLL - (0.005 * i * blackjack_constants.BET_SIZE)))
        return control

    def sim(self) -> None:
        start = time.time()
        self.bank_over_time[0].append(blackjack_constants.PLAYER_BANKROLL)
        for _ in range(0, blackjack_constants.SIM_LENGTH):
            self.run()
            if self.player_bank[1] <= 0 or self.player_bank[1] >= blackjack_constants.PLAYER_BANKROLL * 2:
                break
        stop = time.time()
        self.stats(round(stop - start, 3))


def main() -> None:
    if sys.argv[1] == "user":
        u = UserControlled()
        u.run()
    else:
        id = IdealControlled()
        id.sim()


if __name__ == "__main__":
    main()
